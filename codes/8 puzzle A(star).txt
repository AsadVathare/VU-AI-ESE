import heapq
import math

class PuzzleNode:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.cost = self.heuristic() + self.moves

    def __lt__(self, other):
        return self.cost < other.cost

    def __eq__(self, other):
        return self.board == other.board

    def __str__(self):
        return str(self.board)

    def heuristic(self):
        # Calculate the Manhattan distance heuristic
        total_distance = 0
        for i in range(3):
            for j in range(3):
                tile = self.board[i][j]
                if tile == 0:
                    continue
                correct_row = (tile - 1) // 3
                correct_col = (tile - 1) % 3
                distance = abs(i - correct_row) + abs(j - correct_col)
                total_distance += distance
        return total_distance

    def get_moves(self):
        # Find the location of the empty space and return the possible moves
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    moves = []
                    if i > 0:
                        moves.append((i - 1, j))
                    if i < 2:
                        moves.append((i + 1, j))
                    if j > 0:
                        moves.append((i, j - 1))
                    if j < 2:
                        moves.append((i, j + 1))
                    return moves

    def make_move(self, move):
        # Create a new node with the moved tile and return it
        new_board = [row[:] for row in self.board]
        i, j = move
        empty_i, empty_j = self.get_empty_space()
        new_board[empty_i][empty_j], new_board[i][j] = new_board[i][j], new_board[empty_i][empty_j]
        return PuzzleNode(new_board, self.moves + 1, self)

    def get_empty_space(self):
        # Find the location of the empty space
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j

def solve_puzzle(start_board):
    start_node = PuzzleNode(start_board)
    visited = set()
    heap = [start_node]
    heapq.heapify(heap)
    while heap:
        current_node = heapq.heappop(heap)
        if current_node.board == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
            # Puzzle is solved, return the solution
            solution = []
            while current_node:
                solution.append(current_node.board)
                current_node = current_node.previous
            solution.reverse()
            return solution
        visited.add(str(current_node))
        for move in current_node.get_moves():
            new_node = current_node.make_move(move)
            if str(new_node) not in visited:
                heapq.heappush(heap, new_node)
    return None

# Example usage
start_board = [[1, 2, 3], [4, 0, 5], [7, 8, 6]]
solution = solve_puzzle(start_board)
if solution:
    print("Solution found in", len(solution) - 1, "moves:")
    for board in solution:
        print(board)
else:
    print("No solution found")